import yfinance as yf
import requests
from textblob import TextBlob
import pandas as pd

# 1. Get stock news from NewsAPI
def get_news(query):
    url = f'https://newsapi.org/v2/everything?q={query}&apiKey=Your API Key&pageSize=5'
    response = requests.get(url)
    data = response.json()
    print(data)  # Optional: Remove this in production
    return [article['title'] for article in data.get('articles', [])]

# 2. Analyze sentiment
def analyze_sentiment(news_list):
    results = []
    for headline in news_list:
        sentiment = TextBlob(headline).sentiment.polarity
        results.append((headline, sentiment))
    return results

# 3. CLI version
def cli_main():
    stock = input("Enter a stock/company name (e.g., Apple): ")
    news = get_news(stock)
    if not news:
        print("No news found.")
        return
    sentiment_results = analyze_sentiment(news)
    df = pd.DataFrame(sentiment_results, columns=["Headline", "Sentiment"])
    print("\nSentiment Analysis:")
    print(df)
    print(f"\nAverage Sentiment Score: {df['Sentiment'].mean():.2f}")

# 4. Streamlit version
def streamlit_main():
    import streamlit as st
    st.title("Stock News Sentiment Analyzer")
    stock = st.text_input("Enter a stock/company name", "Tesla")
    
    if st.button("Analyze"):
        news = get_news(stock)
        if not news:
            st.write("No news found.")
            return
        sentiment_results = analyze_sentiment(news)
        df = pd.DataFrame(sentiment_results, columns=["Headline", "Sentiment"])
        st.write(df)
        st.write(f"**Average Sentiment Score:** {df['Sentiment'].mean():.2f}")

# 5. Run condition
if __name__ == "__main__":
    # Comment/uncomment based on how you want to run
    cli_main()         # <-- Console Version
    # streamlit_main() # <-- Streamlit Version (Run using: `streamlit run script.py`)
